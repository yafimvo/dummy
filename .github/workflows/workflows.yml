name: CI

on:
  push:
  pull_request:
    types:
      - closed

  pull_request_review:
    types:
      - submitted
      
jobs:
  test:
    strategy:
      matrix:
        python-version: ['3.11']
        os: [ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Lint with flake8
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          flake8

      - name: Install dependencies
        run: |

          pip install .
          # check package is importable
          python -c "import ploomber_dummy"
          pip install ".[dev]"


      - name: Test with pytest
        run: |
          pytest --durations-min=5


  # run: pkgmt check
  check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'pkgmt[check]'
      - name: Check project
        run: |
          pkgmt check

  if_release_candidate:
    if: github.ref_name == 'main' && startsWith(github.event.head_commit.message, '[release]')
    needs: [test, check]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'pkgmt[check]' twine wheel

      - name: Set ENV variables
        run: |
          BRANCH_NAME=automated_release_branch_${{ github.head_ref || github.ref_name }}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          MAIN_BRANCH="main"
          echo "MAIN_BRANCH=$MAIN_BRANCH" >> $GITHUB_ENV  

      - name: Configure git
        run: |
          git config user.email "github-actions@ploomber.io"
          git config user.name "github-actions"

      - name: Create a new branch and bump up tag version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          MAIN_BRANCH=${{ env.MAIN_BRANCH }}
          BRANCH_NAME=${{ env.BRANCH_NAME }}

          echo "Pulling latest version from : $MAIN_BRANCH"
          git pull origin $MAIN_BRANCH

          echo "Creating a new branch : $BRANCH_NAME"
          git branch $BRANCH_NAME
          echo "SWITCH $BRANCH_NAME"
          git switch $BRANCH_NAME          

          pkgmt version --yes --no-push
          
          TAG=$(git describe --abbrev=0)

          echo "TAG=$TAG" >> $GITHUB_ENV
          
          echo "Running git add"
          git add .

          echo "Adding a commit"
          git commit --allow-empty -m "updates version"

          echo "Pushing changes to : $BRANCH_NAME"
          git push origin $BRANCH_NAME

      - name: Create a new PR for release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ env.TAG }}
          gh pr create -B $MAIN_BRANCH --title "$TAG" -l "release" -r yafimvo -r ploomber-bot --body "Automated PR to release a new version [$TAG] to PyPI"

  if_release_pr_approved:
    if: ${{ (github.event.review.state == 'approved') && (contains(github.event.pull_request.labels.*.name, 'release')) }}
    needs: [test, check]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'pkgmt[check]' twine wheel

      - name: Configure git
        run: |
          git config user.email "github-actions@ploomber.io"
          git config user.name "github-actions"
          
      - name: Set ENV variables
        run: |
          TAG=${{ github.event.pull_request.title }}
          echo "TAG=$TAG" >> $GITHUB_ENV

          BRANCH_NAME=automated_release_branch_${{ github.head_ref || github.ref_name }}
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          MAIN_BRANCH="main"
          echo "MAIN_BRANCH=$MAIN_BRANCH" >> $GITHUB_ENV  

      - name: Create a new TAG and Push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=${{ env.TAG }}
          echo "Running : git tag -a $TAG -m 'releasing a new tag from automation'"
          git tag -a $TAG -m "releasing a new tag from automation"
          echo "Running : git push origin $TAG --no-verify"
          git push origin $TAG --no-verify

      - name: Release to PyPI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TWINE_USERNAME: "__token__"
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          TAG=${{ env.TAG }}
          echo yes | pkgmt release $TAG --production

      - name: Merge release PR to main 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr merge --auto --delete-branch --squash ${{github.event.pull_request.number}}
